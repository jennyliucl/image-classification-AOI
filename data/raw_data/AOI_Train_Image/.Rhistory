library("EBImage")
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
# EBImage needed through Bioconductor, which uses BiocManager
if (!require(EBImage)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
}
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
source('~/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI.R')
images <- read.csv("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_train.csv")
View(images)
rm(images)
test <- read.csv("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_train.csv")
View(test)
train <- read.csv("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_train.csv")
rm(train)
View(test)
unique(train$Label)
train <- read.csv("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_train.csv")
rm(test)
View(train)
unique(train$Label)
class(unique(train$Label))
class(unique(train$Label)[1])
samples <- c()
for (i in 0:5){
samples <- c(samples, sample(train$Label[i],6))
}
samples <- c()
for (i in 0:5){
samples <- c(samples, sample(train$ID[train$Label==i],6))
}
samples
samples <- data.frame(matrix(rep(NA,36),nrow = 6))
samples
rownames(samples, paste("Label",0:5))
samples
rownames
?rownames
rownames(samples) <- paste("Label",0:5)
samples
for (i in 0:5){
samples[i,] <- sample(train$ID[train$Label==i],6)
}
samples
for (i in 0:5){
samples[i+1,] <- sample(train$ID[train$Label==i],6)
}
samples
getwd()
setwd("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_Test_Image")
getwd()
display(readImage(samples[1,]), method="browser")
samples[1,]
samples[1,1]
display(readImage(samples[1,1]), method="browser")
setwd("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_Train_Image")
display(readImage(samples[1,1]), method="browser")
display(readImage(samples[1,]), method="browser")
display(readImage(samples[1,1]), method="browser")
par(mfrow=c(2,3))
display(readImage(samples[1,]), method="browser")
par(mfrow=c(2,3))
for (i in 1:6){
display(readImage(samples[1,i]), method="browser")
}
layout(matrix(1:6,nrow=2))
for (i in 1:6){
display(readImage(samples[1,i]), method="browser")
}
display(readImage(samples[1,]), method="browser")
samples[1,1]
rm(samples)
samples <- list()
for (i in 0:5){
samples[[i+1]] <- sample(train$ID[train$Label==i],6)
}
samples
display(samples[[1]])
samples[[1]]
class(samples[[1]])
display(array(samples[[1]]))
display(readImage(samples[1,2]), method="browser")
display(readImage(samples[1][2]), method="browser")
samples[1][2]
rm(samples)
train <- read.csv("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_train.csv")
samples <- data.frame(matrix(rep(NA,36),nrow = 6))
rownames(samples) <- paste("Label",0:5)
for (i in 0:5){
samples[i+1,] <- sample(train$ID[train$Label==i],6)
}
samples
# display sampling images
setwd("/Users/liuchenli/Desktop/NCKU/1102_MACHINE LEARNING/AOI project/AOI_Train_Image")
layout(matrix(1:6,nrow=2))
for (i in 1:6){
display(readImage(samples[1,i]), method="browser")
}
display(readImage(samples[1,1]), method="browser")
display(readImage(samples[1,2]), method="browser")
for (i in 1:6){
png(readImage(samples[1,i]), method="browser")
}
op <- par(mfrow=c(2,2))
par(op)
for (i in 1:6){
display(readImage(samples[1,i]), method="browser")
}
op <- par(mfrow=c(2,2))
par(op)
layout(matrix(1:6,nrow=2))
for (i in 1:6){
display(readImage(samples[1,i]), method="browser")
}
display(readImage(samples[1,4]), method="browser")
display(readImage(samples[1,1:2]), method="browser")
for (i in 1:6){
display(readImage(samples[1,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[1,i]), method="raster")
}
layout(matrix(6:6,nrow=6))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
layout(matrix(1:36,nrow=6))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
layout(matrix(1:36, nrow=6, byrow = T))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
?display
layout(matrix(1:36, nrow=6))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
#layout(matrix(1:36, nrow=6))
par(mfrow=c(6,6), mar=c(0, 0, 1, 0))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
#layout(matrix(1:36, nrow=6))
par(mfrow=c(6,6), mar=c(1, 1, 1, 1))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
#layout(matrix(1:36, nrow=6))
par(mfrow=c(6,6), mar=c(5,5,5,5))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
?layout
mar=c(1,1,1,1)
layout(matrix(1:36, nrow=6))
#par(mfrow=c(6,6), mar=c(5,5,5,5))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
mar=c(1,1,1,1)
layout(matrix(1:36))
#par(mfrow=c(6,6), mar=c(5,5,5,5))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
mar=c(1,1,1,1)
layout(matrix(1:36,nrow = T))
#par(mfrow=c(6,6), mar=c(5,5,5,5))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
mar=c(1,1,1,1)
layout(matrix(1:36,nrow = 6))
#par(mfrow=c(6,6), mar=c(5,5,5,5))
for (i in 1:6){
for (j in 1:6){
display(readImage(samples[i,j]), method="raster")
}
}
mar=c(1,1,1,1)
layout(matrix(1:6,nrow = 2))
for (i in 1:6){
display(readImage(samples[1,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[2,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[3,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[4,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[5,i]), method="raster")
}
for (i in 1:6){
display(readImage(samples[6,i]), method="raster")
}
n <- c(25,50,100,150,200)
(2*n+1)/(sqrt(pi*n)*exp(18*n))-1
(2*n+1)/(sqrt(pi*n)*exp(18*n))
(2*n+1)/(sqrt(pi*n)*exp(18*n))-1
(2*n+1)/(sqrt(pi*n)*exp(8*n))-1
(2*n+1)/(sqrt(pi*n))*exp(-18*n)-1
n
(2*n+1)/(sqrt(pi*n))*exp(-18*n)-1
(2*n+1)
(2*n+1)/(sqrt(pi*n))
*exp(-18*n)
exp(-18*n)
(2*n+1)/(sqrt(pi*n)*exp(18*n))-1
(2*n+1)*(-5/24*n)/sqrt(pi*n)-1
(2*n+1)/(sqrt(pi*n)*exp(1/8*n))-1
(2*n+1)*exp(-1/(8*n))/sqrt(pi*n)-1
